#!/usr/bin/env python
#
#  Copyright (c) 2013 Catalyst IT http://www.catalyst.net.nz
#  Copyright (c) 2015 SWITCH http://www.switch.ch
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

import argparse
import socket
import os
import re
import subprocess
import sys
import json

__version__ = '1.5.0'

# default ceph values
CEPH_EXEC = '/usr/bin/ceph'
CEPH_COMMAND = 'status -f json'

# nagios exit code
STATUS_OK = 0
STATUS_WARNING = 1
STATUS_ERROR = 2
STATUS_UNKNOWN = 3

def main():

    # parse args
    parser = argparse.ArgumentParser(description="'ceph quorum_status' nagios plugin.")
    parser.add_argument('-e','--exe', help='ceph executable [%s]' % CEPH_EXEC)
    parser.add_argument('-c','--conf', help='alternative ceph conf file')
    parser.add_argument('-m','--monaddress', help='ceph monitor to use for queries (address[:port])')
    parser.add_argument('-i','--id', help='ceph client id')
    parser.add_argument('-k','--keyring', help='ceph client keyring file')
    parser.add_argument('-V','--version', help='show version and exit', action='store_true')
    args = parser.parse_args()

    if args.version:
        print 'version %s' % __version__
        return STATUS_OK

    # validate args
    ceph_exec = args.exe if args.exe else CEPH_EXEC
    if not os.path.exists(ceph_exec):
        print "Throughput ERROR: ceph executable '%s' doesn't exist" % ceph_exec
        return STATUS_UNKNOWN

    if args.conf and not os.path.exists(args.conf):
        print "Throughput ERROR: ceph conf file '%s' doesn't exist" % args.conf
        return STATUS_UNKNOWN

    if args.keyring and not os.path.exists(args.keyring):
        print "Throughput ERROR: keyring file '%s' doesn't exist" % args.keyring
        return STATUS_UNKNOWN

    # build command
    ceph_cmd = [ceph_exec]
    if args.monaddress:
        ceph_cmd.append('-m')
        ceph_cmd.append(args.monaddress)
    if args.conf:
        ceph_cmd.append('-c')
        ceph_cmd.append(args.conf)
    if args.id:
        ceph_cmd.append('--id')
        ceph_cmd.append(args.id)
    if args.keyring:
        ceph_cmd.append('--keyring')
        ceph_cmd.append(args.keyring)
    ceph_cmd.extend(CEPH_COMMAND.split(' '))

    # exec command
    p = subprocess.Popen(ceph_cmd,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output, err = p.communicate()

    if p.returncode != 0 or not output:
        print "Throughput ERROR: %s" % err
        return STATUS_ERROR

    # load json output and parse
    status = None
    try:
        pgmap = json.loads(output)['pgmap']
    except Exception as e:
        print "Throughput ERROR: could not parse '%s' output: %s: %s" % (CEPH_COMMAND,output,e)
        return STATUS_UNKNOWN

    write_throughput = pgmap['write_bytes_sec'] if 'write_bytes_sec' in pgmap else 0
    read_throughput = pgmap['read_bytes_sec'] if 'read_bytes_sec' in pgmap else 0

    MB = 1024.0 * 1024.0
    print "Throughput OK: write=%0.2f MB/s, read=%0.2f MB/s" % ( write_throughput/MB, read_throughput/MB)
    return STATUS_OK

# main
if __name__ == "__main__":
    sys.exit(main())

